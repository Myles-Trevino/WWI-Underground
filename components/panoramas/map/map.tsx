/*
	Copyright Myles Trevino
	Licensed under the Apache License, Version 2.0
	http://www.apache.org/licenses/LICENSE-2.0
*/


import React, {useContext} from 'react';
import {observer} from 'mobx-react-lite';
import * as Three from 'three';

import StateContext from '../../../common/state/state-context';
import Styles from './map.module.scss';


const pointRadius = 20;

const points = [
	new Three.Vector2(246, 250),
	new Three.Vector2(368, 430),
	new Three.Vector2(476, 527),
	new Three.Vector2(733, 535),
	new Three.Vector2(975, 422),

	new Three.Vector2(1165, 336),
	new Three.Vector2(1110, 527),
	new Three.Vector2(907, 602),
	new Three.Vector2(1246, 212)
];

const fovOffsets = [-60, -77, -70, -110, -100, -58, 123, -90, 40];


export default observer(function Message(): JSX.Element {

	const state = useContext(StateContext);


	// Render.
	if(!state.panoramas.panoramaName) return <></>;
	const panoramaIndex = Number.parseInt(state.panoramas.panoramaName)-1;
	const fovOffset = fovOffsets[panoramaIndex];

	const svgPoints: JSX.Element[] = [];
	const selectedPoint = points[panoramaIndex];
	points.forEach((value, index) => {
		svgPoints.push(<circle key={index} className={Styles.point}
			onClick={(): void => { state.panoramas.setPanorama(`${index+1}`); }}
			cx={value.x} cy={value.y} r={pointRadius}/>);
	});

	return (<>
		<svg className={Styles.svg} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1335.11 926.33">

			{/* Map. */}
			<path className={Styles.map} d="M1321.39,341.91l-7.29-22.48,11.54-15.8L1353,242.87l-30.38-14,6.69-13.37-85.67-34s-10.64,41.92-18.23,52.86-18.53,43.14-24.91,52.25-28,43.14-28,43.14L1158,337.05s4,21.27-12.16,23.09-24.91-24.3-24.91-24.3l-18.83,20.05,5.47,15.19s-6.38,15.79-6.69,20.65,4.26,15.8,4.26,15.8l-18.84,1.22,3.65,13.36s-106.64,27.95-125.17,34-103.29,14-103.29,14L857.19,447l-32.81,14.58s-7-21.88-21.88-26.74S784,447,779.41,452.49s3,13.37,3,13.37l-11.9,14,5.22,40.7-46.18,3,7.29,20L701,543l.61,32.2L681,577.66l.61,15.19-26.73,1.82-9.12-9.11-11.54,1.21s-4-12.76-7.9-24.3,6.38-14,10.94-17.62-13.07-21.27-16.41-25.52-13.36-15.19-27.64-7.9S546.4,540,530.3,535.6c-7.18-2-4.25-23-4.25-23s-4.56-4.87-5.47-9.73,4.56-7.89,16.4-14.58,2.13-12.15,2.43-40.1-10.63-41.92-16.4-46.18-12.46,3.65-24.91,9.72-18.53-1.21-25.52-3-13.67,14-23.7,19.44-22.17,4.86-32.2,4.86c.3-6.08,10.63-20.66,14-30.38s-2.74-23.7-1.22-31.59,13.37-21.88,13.37-21.88-9.72-11.54-14.28-20.66,5.47-29.16-3.95-34.63-19.14-15.8-20.66-19.44-7-6.08-28.56-10.94-25.21-7.9-24.91-34c.09-7.91,3.95-28.56-9.11-28.56s-13.67,38.89-21.27,40.71-10,3.64-18.83,9.11-48,1.82-48,1.82-4-9.11-7.9-16.4c5.77-5.47,1.21-14.58,1.21-14.58L191.26,197.3s-2.12-10.93-12.15-31-35.85-46.79-35.85-46.79a393,393,0,0,0-23.69-32.2c-13.07-15.8-25.83-12.15-32.81-9.72s5.77,19.44-4.86,28,0,23.69,0,23.69-10,3.65-12.16,7.9,2.43,14,2.43,14,.31,4.31-6.07,9.11c-30.08-9.72-34.33-3-40.71,5.47s44.35,51.64,44.35,51.64-12.45,18.23,0,29.78c8.08,7.48,99,37.67,99,37.67l-6.07,14-41.93-9.11s-.3,4.91-5.46,10.68,8.8,26.08,8.5,30.63,16.1,27,18.23,30.38-2.74,10-4.86,19.45,14.28,15.49,31,31.59a250.7,250.7,0,0,1,27.35,31H218.6s29.47,14.28,38.28,7.9a17.81,17.81,0,0,0,7.19-16.41l17.72-9.72L294,451.28s-19.75,20.35-27.35,43.14,3.95,44.05,7.9,62S287,568.85,292.73,571s25.22,35.55,32.2,38.89,13.37-1.21,13.37-1.21,27,21.57,29.17,44.35c2,21.33,20.48,17.63,22.84,17.07l-19.2,4.8L374.76,687l-29.17,14a113.57,113.57,0,0,0,15.19,23.09c10,11.85,24.91,6.68,24.91,6.68L413,723.48l-4.86,17.62,17,7.9,19.44-10.94,31.59,74.74s-11.24,41-17.62,45-14.27,28.86-14,55.9-3.95,44.05-8.51,54.68,2.74,20.36,14.59,26.13,27.64-9.42,41.31-13.37,30.69-20.35,32.81-22.48,0-17.62,0-17.62,8.2-14.28,13.37-20.66,23.09-17,23.09-17l-10.33-17s15.49-11.85,15.19-14.59,6.38-10,11.54-18.83,2.74-24.61,1.22-30.38-7.6-36.76-11.55-52.25S538.2,687,538.2,687L554,676.7l6.68,11.54L582,679.73l26.12-25.51,46.79,21.26-15.8,40.71,37.06,29.16,23.09,1.22s22.18,10,37.67,14,42.23-.91,49.83-1.21,9.41,3.95,16.4,7.9,27,14.28,38.28,15.8,26.43-2.13,34.63-3.65,18.53,3.34,28,1.21,12.76-16.4,12.76-16.4l17.62-5.47,7.9-14-14-20.66,36.45-20.66,77.77,72.3,23.09-24.3,77.17,83.24,26.12,6.08,13.37-21.88,18.23-17,21.87-12.15,11.55-33.42,20-10.94-31.6-18.22,21.87-4.26-82.63-61.36,25.52-24.92,11.55-23.08,17.62-10.33V570.37l12.75-17s11.85.31,20.66,0,16.1-26.43,17-33.41-23.09-9.72-23.09-9.72l10.93-23.7,10.94-13.37L1258.81,458l18.83-25.52h12.76l37.67-57.11-11.54-12.15ZM1032.48,600.75l-23.7-5.47L986,609.86l-25.52,25.52L955,619l-7.29,16.41-10.94,4.56-15.49-8.21-11.85,8.21H838.35l8.2-47.4L925.84,598l-2.73-30.07,21-9.12-.91-13.67,126.68-30.07L1081.69,526Z" transform="translate(-21.83 -72.43)"/>

			{/* FOV. */}
			{(panoramaIndex < fovOffsets.length && !state.panoramas.loading) && <path className={Styles.fov} d="M-77.22-77.22,0,0,77.22-77.22A109.36,109.36,0,0,0-77.22-77.22Z" transform={`translate(${selectedPoint.x} ${selectedPoint.y}),rotate(${Three.MathUtils.radToDeg(state.panoramas.rotation.x)+fovOffset})`}/>}

			{/* Points. */}
			{svgPoints}

		</svg>
	</>);
});
